	.text
	.file	"testfile.c"
# ---------------------------------------------
# asr16
# ---------------------------------------------
	.globl	asr16
asr16:
	jsr	__ashrhi3
	ret

# ---------------------------------------------
# lsr16
# ---------------------------------------------
	.globl	lsr16
lsr16:
	jsr	__lshrhi3
	ret

# ---------------------------------------------
# lsl16
# ---------------------------------------------
	.globl	lsl16
lsl16:
	jsr	__ashlhi3
	ret

# ---------------------------------------------
# multiply16s
# ---------------------------------------------
	.globl	multiply16s
multiply16s:
	jsr	__mulhi3
	ret

# ---------------------------------------------
# multiply16u
# ---------------------------------------------
	.globl	multiply16u
multiply16u:
	jsr	__mulhi3
	ret

# ---------------------------------------------
# multiply32s
# ---------------------------------------------
	.globl	multiply32s
multiply32s:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__mulsi3
	ret

# ---------------------------------------------
# multiply32u
# ---------------------------------------------
	.globl	multiply32u
multiply32u:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__mulsi3
	ret

# ---------------------------------------------
# divide16s
# ---------------------------------------------
	.globl	divide16s
divide16s:
	jsr	__divhi3
	ret

# ---------------------------------------------
# modulus16s
# ---------------------------------------------
	.globl	modulus16s
modulus16s:
	jsr	__modhi3
	ret

# ---------------------------------------------
# divide16u
# ---------------------------------------------
	.globl	divide16u
divide16u:
	jsr	__udivhi3
	ret

# ---------------------------------------------
# modulus16u
# ---------------------------------------------
	.globl	modulus16u
modulus16u:
	jsr	__umodhi3
	ret

# ---------------------------------------------
# divide32s
# ---------------------------------------------
	.globl	divide32s
divide32s:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__divsi3
	ret

# ---------------------------------------------
# modulus32s
# ---------------------------------------------
	.globl	modulus32s
modulus32s:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__modsi3
	ret

# ---------------------------------------------
# divide32u
# ---------------------------------------------
	.globl	divide32u
divide32u:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__udivsi3
	ret

# ---------------------------------------------
# modulus32u
# ---------------------------------------------
	.globl	modulus32u
modulus32u:
	ld.w	[SP, 2], r2
	ld.w	[SP, 4], r3
	jsr	__umodsi3
	ret

# ---------------------------------------------
# asr32_1
# ---------------------------------------------
	.globl	asr32_1
asr32_1:
	zext	r1, r2
	bswap	r2, r2
	lsr	r0, r0
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	or	r0, r2, r0
	asr	r1, r1
	ret

# ---------------------------------------------
# lsr32_1
# ---------------------------------------------
	.globl	lsr32_1
lsr32_1:
	zext	r1, r2
	bswap	r2, r2
	lsr	r0, r0
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	lsl	r2, r2
	or	r0, r2, r0
	lsr	r1, r1
	ret

# ---------------------------------------------
# lsl32_1
# ---------------------------------------------
	.globl	lsl32_1
lsl32_1:
	lsl	r1, r1
	cmp	r0, 0
	setlt	r2
	or	r1, r2, r1
	lsl	r0, r0
	ret

# ---------------------------------------------
# add32
# ---------------------------------------------
	.globl	add32
add32:
	ld.w	[SP, 2], r2
	add	r2, r0, r0
	ld.w	[SP, 4], r2
	addc	r2, r1, r1
	ret

# ---------------------------------------------
# sub32
# ---------------------------------------------
	.globl	sub32
sub32:
	ld.w	[SP, 2], r2
	sub	r0, r2, r0
	ld.w	[SP, 4], r2
	subc	r1, r2, r1
	ret

# ---------------------------------------------
# btand32
# ---------------------------------------------
	.globl	btand32
btand32:
	ld.w	[SP, 2], r2
	and	r2, r0, r0
	ld.w	[SP, 4], r2
	and	r2, r1, r1
	ret

# ---------------------------------------------
# btor32
# ---------------------------------------------
	.globl	btor32
btor32:
	ld.w	[SP, 2], r2
	or	r2, r0, r0
	ld.w	[SP, 4], r2
	or	r2, r1, r1
	ret

# ---------------------------------------------
# btxor32
# ---------------------------------------------
	.globl	btxor32
btxor32:
	ld.w	[SP, 2], r2
	xor	r2, r0, r0
	ld.w	[SP, 4], r2
	xor	r2, r1, r1
	ret

# ---------------------------------------------
# eq32
# ---------------------------------------------
	.globl	eq32
eq32:
	ld.w	[SP, 4], r2
	xor	r1, r2, r1
	ld.w	[SP, 2], r2
	xor	r0, r2, r0
	or	r0, r1, r0
	seteq	r0
	ret

# ---------------------------------------------
# lt32
# ---------------------------------------------
	.globl	lt32
lt32:
	ld.w	[SP, 2], r2
	cmp	r0, r2
	setult	r0
	ld.w	[SP, 4], r2
	cmp	r1, r2
	setlt	r1
	seleq	r0, r1, r0
	ret

# ---------------------------------------------
# gt32
# ---------------------------------------------
	.globl	gt32
gt32:
	ld.w	[SP, 2], r2
	cmp	r0, r2
	setugt	r0
	ld.w	[SP, 4], r2
	cmp	r1, r2
	setgt	r1
	seleq	r0, r1, r0
	ret

# ---------------------------------------------
# le32
# ---------------------------------------------
	.globl	le32
le32:
	ld.w	[SP, 2], r2
	cmp	r2, r0
	setuge	r0
	ld.w	[SP, 4], r2
	cmp	r2, r1
	setge	r3
	cmp	r1, r2
	seleq	r0, r3, r0
	ret

# ---------------------------------------------
# ge32
# ---------------------------------------------
	.globl	ge32
ge32:
	ld.w	[SP, 2], r2
	cmp	r0, r2
	setuge	r0
	ld.w	[SP, 4], r2
	cmp	r1, r2
	setge	r1
	seleq	r0, r1, r0
	ret


